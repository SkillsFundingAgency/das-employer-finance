@using System.Globalization
@using SFA.DAS.EmployerFinance.Models.Payments
@using SFA.DAS.EmployerFinance.Models.Transaction
@using SFA.DAS.EmployerFinance.Models.Transfers
@using SFA.DAS.Common.Domain.Types;
@model SFA.DAS.EmployerFinance.Web.Orchestrators.OrchestratorResponse<TransactionViewResultViewModel>

@{
    var culture = new CultureInfo("en-GB");
    ViewBag.PageID = "transactions";
    ViewBag.Section = "finance";
    ViewBag.Title = "Your transactions";
    ViewBag.ZenDeskLabel = "eas-your-transactions";
    ViewBag.GaData.Vpv = $"/finance/{ViewBag.PageID}";
    var displayingMonthDate = new DateTime(Model.Data.Year, Model.Data.Month, 1);
    var previousMonthDate = displayingMonthDate.AddMonths(-1);
    var nextMonthDate = displayingMonthDate.AddMonths(1);
}


        <h1 class="govuk-heading-xl">
            Your transactions
            <span class="govuk-caption-xl">@displayingMonthDate.ToGdsFormatWithoutDay()</span>
        </h1>

        @if (Model.Data.IsLatestMonth && Model.Data.Account.ApprenticeshipEmployerType == ApprenticeshipEmployerType.Levy.ToString())
        {
            <div class="govuk-grid-row govuk-!-margin-bottom-8">
                <div class="govuk-grid-column-one-third">
                    <p class="app-finance-figure__title" id="lbl-current-funds">Current funds</p>
                    <div class="govuk-body govuk-!-font-size-24 app-finance-figure" aria-labelledby="lbl-current-funds">@Model.Data.Model.CurrentBalance.ToString("C0", culture)</div>
                </div>
            </div>
    
        }


        @if (Model.Data.Model.Data.TransactionLines.All(c => c.TransactionType == TransactionItemType.Unknown))
        {
            <div class="govuk-inset-text">
                @if (Model.Data.IsLatestMonth)
                {
                    <p>No transactions yet</p>
                }
                else
                {
                    <p>No transactions</p>
                }
            </div>
            if (!Model.Data.AccountHasPreviousTransactions && Model.Data.Account.ApprenticeshipEmployerType == ApprenticeshipEmployerType.Levy.ToString())
            {

                <details>
                    <summary><span class="summary">Why can't I see my levy funds?</span></summary>
                    <div class="panel panel-info">
                        <p><b>Make sure you’re logged into the correct account and the correct PAYE schemes are added to the account.</b></p>
                        <p><b>If you declare after 19 July, we ignore your declaration and levy funds will not credit your account this month. You can claim your July funds next month by resubmitting your levy figures for July in your August declaration.</b></p>
                    </div>
                </details>
            }
        }
        else
        {
            <table class="govuk-table">
                <caption class="govuk-visually-hidden">Transactions</caption>
                <thead class="govuk-table__head">
                    <tr class="govuk-table__row">
                        <th scope="col" class="govuk-table__header"><span class="das-no-wrap">Payment date</span></th>
                        <th scope="col" class="govuk-table__header">Description</th>
                        <th scope="col" class="govuk-table__header govuk-table__header--numeric">Amount</th>
                        <th scope="col" class="govuk-table__header govuk-table__header--numeric"><span class="govuk-visually-hidden">Action</span></th>
                    </tr>
                </thead>
                <tbody class="govuk-table__body">
                    @foreach (var aggregationLine in Model.Data.Model.Data.TransactionLines)
                    {
                        var fromDate = aggregationLine.DateCreated.Date;
                        var toDate = new DateTime(aggregationLine.DateCreated.Year, aggregationLine.DateCreated.Month, aggregationLine.DateCreated.Day, 23, 59, 59);

                        <tr class="govuk-table__row">
                            <td class="govuk-table__cell">
                                <span class="das-no-wrap">
                                    @{var date = aggregationLine.DateCreated.ToGdsFormat();} @date
                                </span>
                            </td>
                            <td class="govuk-table__cell">
                                @aggregationLine.Description
                            </td>

                            @{
                                var transactionAmount = aggregationLine.Amount;

                                if (aggregationLine.TransactionType == TransactionItemType.Payment)
                                {
                                    var paymentTransaction = aggregationLine as PaymentTransactionLine;

                                    if (paymentTransaction != null)
                                    {
                                        transactionAmount += paymentTransaction.EmployerCoInvestmentAmount +
                                                 paymentTransaction.SfaCoInvestmentAmount;
                                    }
                                }
                            }

                            <td class="govuk-table__cell govuk-table__cell--numeric">
                                <span class="das-no-wrap">
                                    @(transactionAmount.ToString("C2", culture))
                                </span>
                            </td>
                            <td class="govuk-table__cell govuk-table__cell--numeric">

                                @if (aggregationLine.TransactionType == TransactionItemType.Declaration ||
                                     aggregationLine.TransactionType == TransactionItemType.TopUp)
                                {
                                    <a class="govuk-link" title="View details for the transaction on @date" href="@Url.Action("LevyDeclarationDetail", "EmployerAccountTransactions", new {HashedAccountId = Model.Data.Model.Data.HashedAccountId, fromDate, toDate})">
                                        Details <span class="govuk-visually-hidden"> for the transaction on @date</span>
                                    </a>
                                }
                                else if (aggregationLine.TransactionType == TransactionItemType.Payment)
                                {
                                    var paymentTransaction = aggregationLine as PaymentTransactionLine;

                                    <a class="govuk-link" title="View details for the transaction on @date" href="@Url.Action("ProviderPaymentSummary", "EmployerAccountTransactions", new {HashedAccountId = Model.Data.Model.Data.HashedAccountId, ukPrn = paymentTransaction?.UkPrn, fromDate = fromDate, toDate = toDate })">
                                        Details <span class="govuk-visually-hidden"> for the transaction on @date</span>

                                    </a>
                                }
                                else if (aggregationLine.TransactionType == TransactionItemType.Transfer)
                                {
                                    var transferTransaction = aggregationLine as TransferTransactionLine;

                                    var targetAccountPublicHashedId =
                                        transferTransaction.TransactionAccountIsTransferSender ?
                                            transferTransaction?.ReceiverAccountPublicHashedId :
                                            transferTransaction?.SenderAccountPublicHashedId;

                                    <a class="govuk-link" title="View details for the transfer transaction on @date"
                                       href="@Url.Action("TransferDetail", "EmployerAccountTransactions",
                                                     new
                                                     {
                                                         HashedAccountId = Model.Data.Model.Data.HashedAccountId,
                                                         TargetAccountPublicHashedId = targetAccountPublicHashedId,
                                                         PeriodEnd = transferTransaction?.PeriodEnd
                                                     })">
                                        Details <span class="govuk-visually-hidden"> for the transfer transaction on @date</span>
                                    </a>

                                }

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }


        <nav class="govuk-pagination govuk-pagination--block" role="navigation">
            @if (!Model.Data.IsFirstMonthOfLevy && Model.Data.AccountHasPreviousTransactions)
            {
            <div class="govuk-pagination__prev">
                <a class="govuk-link govuk-pagination__link" href="@Url.Action("TransactionsView", new {year = @previousMonthDate.Year, month=@previousMonthDate.Month})" rel="prev">
                <svg class="govuk-pagination__icon govuk-pagination__icon--prev" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
                    <path d="m6.5938-0.0078125-6.7266 6.7266 6.7441 6.4062 1.377-1.449-4.1856-3.9768h12.896v-2h-12.984l4.2931-4.293-1.414-1.414z"></path>
                </svg>
                <span class="govuk-pagination__link-title">Previous month</span><span class="govuk-visually-hidden">:</span>
                <span class="govuk-pagination__link-label">@previousMonthDate.ToGdsFormatWithoutDay()</span></a>
            </div>
            }
            @if (!Model.Data.IsLatestMonth)
            {
            <div class="govuk-pagination__next">
                <a class="govuk-link govuk-pagination__link" href="@Url.Action("TransactionsView", new {year = @nextMonthDate.Year, month=@nextMonthDate.Month})" rel="next"> <svg class="govuk-pagination__icon govuk-pagination__icon--next" xmlns="http://www.w3.org/2000/svg" height="13" width="15" aria-hidden="true" focusable="false" viewBox="0 0 15 13">
                    <path d="m8.107-0.0078125-1.4136 1.414 4.2926 4.293h-12.986v2h12.896l-4.1855 3.9766 1.377 1.4492 6.7441-6.4062-6.7246-6.7266z"></path>
                </svg> <span class="govuk-pagination__link-title">Next month</span><span class="govuk-visually-hidden">:</span>
                <span class="govuk-pagination__link-label">@nextMonthDate.ToGdsFormatWithoutDay()</span></a>
            </div>
            }
        </nav>

        <details class="govuk-details app-survey-details" data-module="govuk-details">
            <summary class="govuk-details__summary govuk-link--inverse app-survey-details__summary"><span class="govuk-details__summary-text">Help us improve this section</span></summary>
            <div class="app-survey-details__wrapper">
                <script id="ss-embed-396029">
                    (function (d, w) {
                        var s, ss; ss = d.createElement('script');
                        ss.type = 'text/javascript';
                        ss.async = true;
                        ss.src = ('https:' == d.location.protocol ? 'https://' : 'http://') + 'www.smartsurvey.co.uk/s/r/embed.aspx?i=350750&c=396029';
                        s = d.getElementsByTagName('script')[0];
                        s.parentNode.insertBefore(ss, s);
                    })(document, window);
                </script>
            </div>
        </details>


@section breadcrumb {
    <div class="govuk-breadcrumbs">
        <ol class="govuk-breadcrumbs__list">
            <li class="govuk-breadcrumbs__list-item"><a href="@Url.Action("Index", "EmployerAccountTransactions", new {HashedAccountId = Model.Data.Model.Data.HashedAccountId})" class="govuk-breadcrumbs__link">Finance</a></li>
            <li class="govuk-breadcrumbs__list-item">Your transactions</li>
        </ol>
    </div>
}
